<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ahmad Mohammad</title>
    <link>http://ahmedas91.github.io/</link>
    <description>Recent content on Ahmad Mohammad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jun 2016 20:55:56 +0300</lastBuildDate>
    <atom:link href="http://ahmedas91.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kaggle Animal Shelter Competition</title>
      <link>http://ahmedas91.github.io/blog/2016/06/25/kaggle-animal-shelter-competition/</link>
      <pubDate>Sat, 25 Jun 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/06/25/kaggle-animal-shelter-competition/</guid>
      <description>&lt;iframe src=&#34;http://nbviewer.jupyter.org/gist/ahmedas91/5699f914a158bf23402d8f7cd53b3571&#34; width=&#34;1000&#34; height=&#34;6800&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>Using Logistic Regression, Gaussian Naive Bayes and Random Forests to Classify Students&#39; Success Rate</title>
      <link>http://ahmedas91.github.io/blog/2016/04/09/using-logistic-regression-gaussian-naive-bayes-and-random-forests-to-classify-students-success-rate/</link>
      <pubDate>Sat, 09 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/04/09/using-logistic-regression-gaussian-naive-bayes-and-random-forests-to-classify-students-success-rate/</guid>
      <description>&lt;iframe src=&#34;http://nbviewer.jupyter.org/gist/ahmedas91/0cc0b278292d1494bbe9e41d95560682&#34; width=&#34;1000&#34; height=&#34;9000&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://ahmedas91.github.io/about/</link>
      <pubDate>Tue, 05 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/about/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ahmedas91.github.io/images/Ahmad_Resume_agility.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Efficient Frontier with Python</title>
      <link>http://ahmedas91.github.io/blog/2016/03/01/efficient-frontier-with-python/</link>
      <pubDate>Tue, 01 Mar 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/03/01/efficient-frontier-with-python/</guid>
      <description>&lt;p&gt;In a previous post, we naively selected growth companies and constructed a uniform-weigh portfolio out of them. In this post, we are going to use the same list of companies to construct a minimum-vaiance portfolios based on Harry Markowitz&amp;rsquo;s &lt;a href=&#34;http://www.efalken.com/LowVolClassics/markowitz_JF1952.pdf&#34;&gt;&amp;lsquo;Portfolio Selection&amp;rsquo; paper&lt;/a&gt; published 1952. Portfolio theory in a nutshell is finding the optimal wights that maximizes the return given a level of risk (variance or standard deviation) or the other way around, minimize the risk given an expected return. We are only going to need some matrix algebra and quadratic programming to explain the mathematics behind the theory. Dr. Eric Zivot&amp;rsquo;s &lt;a href=&#34;http://faculty.washington.edu/ezivot/econ424/portfolioTheoryMatrix.pdf&#34;&gt;notes&lt;/a&gt; provides a great detailed explanation using matrix algebra and most below is taken from his notes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we have N companies and $x$ is a vector of initial random weighs for the portfolio, &lt;code&gt;$\mu$&lt;/code&gt; is a vector of the average returns and &lt;code&gt;${\sigma  }^{ 2 } $&lt;/code&gt; is an &lt;code&gt;$N\times N$&lt;/code&gt; covariance matrix where:&lt;/p&gt;

&lt;div&gt;$$\mu =\begin{bmatrix} { \mu  }_{ 1 } \\ { \mu  }_{ 2 } \\ \vdots  \\ { \mu  }_{ N } \end{bmatrix}\quad x=\begin{bmatrix} { x }_{ 1 } \\ { x }_{ 2 } \\ \vdots  \\ { x }_{ N } \end{bmatrix}\quad \Sigma  =\begin{bmatrix} { \sigma  }_{ 11 } &amp; { \sigma  }_{ 12 } &amp; \dots  &amp; { \sigma  }_{ 1N } \\ { \sigma  }_{ 21 } &amp; { \sigma  }_{ 22 } &amp; \cdots  &amp; { \sigma  }_{ 11 } \\ \vdots  &amp; \vdots  &amp; \ddots  &amp; \vdots  \\ { \sigma  }_{ N1 } &amp; { \sigma  }_{ 11 } &amp; \dots  &amp; { \sigma  }_{ NN } \end{bmatrix}$$&lt;/div&gt;

&lt;p&gt;The portfolio return $R$ and variance &lt;code&gt;${\sigma  }^{ 2 }$&lt;/code&gt; are calculated by:&lt;/p&gt;

&lt;div&gt;$$R = x&#39;\mu$$&lt;/div&gt;

&lt;div&gt;$$\sigma = x&#39;\Sigma x $$&lt;/div&gt;

&lt;p&gt;The main problem here is finding the optimal weigh vector &lt;code&gt;$x$&lt;/code&gt; that satisfies either one of the conditions below depending on whether the investor requires a minimum level of risk or maximum return:&lt;/p&gt;

&lt;div&gt;$$\underset { x }{ min } \quad { \sigma  }^{ 2 }=x&#39;\Sigma x\quad s.t.\quad \mu =x&#39;{ \mu  }_{ required }\quad and\quad x&#39;1=1$$&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div&gt;$$\underset { x }{ max } \quad R =x&#39;{ \mu  }\quad s.t.\quad \Sigma =x&#39;{ \Sigma  }_{ required }x\quad and\quad x&#39;1=1$$&lt;/div&gt;

&lt;p&gt;Solving either of them will give a portfolio that&amp;rsquo;s on the efficient frontier which is, according to &lt;a href=&#34;http://www.investopedia.com/terms/e/efficientfrontier.asp&#34;&gt;investopedia&lt;/a&gt; explanation, a set of optimal portfolios that offers the highest expected return for a defined level of risk or the lowest risk for a given level of expected return. And here is where we&amp;rsquo;re going to start working on python (repo on &lt;a href=&#34;https://github.com/ahmedas91/efficient_frontier&#34;&gt;github&lt;/a&gt;). We&amp;rsquo;re going to draw all the possible portfolios that satisfies the conditions above. The examples &lt;a href=&#34;https://plot.ly/ipython-notebooks/markowitz-portfolio-optimization/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://wellecks.wordpress.com/2014/03/23/portfolio-optimization-with-python/&#34;&gt;here&lt;/a&gt; helped me a lot writing the code. Actually, they provides better explanation of the codes than me. The hardest part was trying to solve the optimization problem using &lt;code&gt;cvxopt&lt;/code&gt; library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#import required libraries
import pandas as pd
import numpy as np
import pandas_datareader.data as web
import datetime
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, iplot
import cufflinks as cf
init_notebook_mode()
import cvxopt as opt
from cvxopt import solvers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First let&amp;rsquo;s import the daily prices of the companies using the same period from the previous post from 1/1/2013 to 12/31/2015.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = pd.read_csv(&amp;quot;TOP_COMP_2012.csv&amp;quot;)
start = datetime.datetime(2013, 1, 1)
end = datetime.datetime(2015, 12, 31)
tickers = list(data[&#39;ticker&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ls_key = &#39;Adj Close&#39;
f = web.DataReader(tickers, &#39;yahoo&#39;,start,end)
cleanData = f.ix[ls_key]
stock_data = pd.DataFrame(cleanData)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll calculate the monthly returns of the stocks. Fortunately pandas library has a function resumaple that can perform operations on a group of specified periods (in our case by month).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;monthly_returns = stock_data.resample(&#39;BM&#39;, how=lambda x: (x[-1]/x[0])-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get beautiful graphs, we are only going to choose five random companies from the list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;companies = list(monthly_returns.sample(5,axis=1, random_state=4).columns)
companies #prints [&#39;TECH&#39;, &#39;WWD&#39;, &#39;CMPR&#39;, &#39;GIS&#39;, &#39;EW&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stock_data[companies].iplot(yTitle=&#39;Daily Price&#39;,dimensions=(950, 500))
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;400&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/8.embed&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;monthly_returns[companies].iplot(yTitle=&#39;Monthly Returns&#39;,dimensions=(950, 500))
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;400&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/10.embed&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Function to get evctor $x$ of random portfolio weighs that sums to 1:
def random_wieghts(n):
    a = np.random.rand(n)
    return a/a.sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def initial_portfolio(monthly_returns):
    #monthly_returns = data.resample(&#39;BM&#39;, how=lambda x: (x[-1]/x[0])-1)
    
    cov = np.matrix(monthly_returns.cov())
    expected_returns = np.matrix(monthly_returns.mean())
    wieghs = np.matrix(random_wieghts(expected_returns.shape[1]))
    
    mu = wieghs.dot(expected_returns.T)
    sigma = np.sqrt(wieghs * cov.dot(wieghs.T))
    
    return mu[0,0],sigma[0,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n_portfolios = 1000
means, stds = np.column_stack([
    initial_portfolio(monthly_returns[companies]) 
    for _ in xrange(n_portfolios)
])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iplot({
&#39;data&#39;:[
    go.Scatter(
                x = stds,
                y = means,
                mode = &#39;markers&#39;,
                name = &#39;Random Portfolio&#39;)
        ],
&#39;layout&#39;: go.Layout(yaxis=go.YAxis(title=&#39;Means&#39;),
                    xaxis=go.XAxis(title=&#39;stdv&#39;))
})
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;400&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/12.embed&#34;&gt;&lt;/iframe&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cvxopt as opt
from cvxopt import solvers

def frontier(monthly_returns):
    cov = np.matrix(monthly_returns.cov())
    n = monthly_returns.shape[1]
    avg_ret = np.matrix(monthly_returns.mean()).T
    r_min = 0.01
    mus = []
    for i in range(120):
        r_min += 0.0001
        mus.append(r_min)
    P = opt.matrix(cov)
    q = opt.matrix(np.zeros((n, 1)))
    G = opt.matrix(np.concatenate((
                -np.transpose(np.array(avg_ret)), 
                -np.identity(n)), 0))
    A = opt.matrix(1.0, (1,n))
    b = opt.matrix(1.0)
    opt.solvers.options[&#39;show_progress&#39;] = False
    portfolio_weights = [solvers.qp(P, q, G,
                                    opt.matrix(np.concatenate((-np.ones((1,1))*yy,
                                                               np.zeros((n,1))), 0)), 
                                    A, b)[&#39;x&#39;] for yy in mus]
    portfolio_returns = [(np.matrix(x).T * avg_ret)[0,0] for x in portfolio_weights]
    portfolio_stdvs = [np.sqrt(np.matrix(x).T * cov.T.dot(np.matrix(x)))[0,0] for x in portfolio_weights]
    return portfolio_weights, portfolio_returns, portfolio_stdvs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;w_f, mu_f, sigma_f = frontier(monthly_returns[companies])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iplot({
&#39;data&#39;:[
    go.Scatter(
                x = stds,
                y = means,
                mode = &#39;markers&#39;,
                name = &#39;Random Portfolio&#39;),
    go.Scatter(
                x = sigma_f,
                y = mu_f,
                mode = &#39;lines+markers&#39;,
                name = &#39;Efficient Frontier&#39;)
            
        ],
&#39;layout&#39;: go.Layout(yaxis=go.YAxis(title=&#39;Means&#39;),
                    xaxis=go.XAxis(title=&#39;stdv&#39;))
})
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;400&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/14.embed&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;We can see from the above graph that the efficient frontier take a shape of a parabola, and it represent all the efficient portfolios that can be constructed using the given companies. However, this is not it. We can also add a risk-free asset and find the Tangency Portfolio. But we&amp;rsquo;ll leave it for another post.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.efalken.com/LowVolClassics/markowitz_JF1952.pdf&#34;&gt;http://www.efalken.com/LowVolClassics/markowitz_JF1952.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://faculty.washington.edu/ezivot/econ424/portfolioTheoryMatrix.pdf&#34;&gt;http://faculty.washington.edu/ezivot/econ424/portfolioTheoryMatrix.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://plot.ly/ipython-notebooks/markowitz-portfolio-optimization/&#34;&gt;https://plot.ly/ipython-notebooks/markowitz-portfolio-optimization/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://wellecks.wordpress.com/2014/03/23/portfolio-optimization-with-python/&#34;&gt;https://wellecks.wordpress.com/2014/03/23/portfolio-optimization-with-python/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Model Evaluation and Validation Using Boston Housing prices</title>
      <link>http://ahmedas91.github.io/blog/2016/02/20/model-evaluation-and-validation-using-boston-housing-prices/</link>
      <pubDate>Sat, 20 Feb 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/02/20/model-evaluation-and-validation-using-boston-housing-prices/</guid>
      <description>&lt;iframe src=&#34;https://nbviewer.jupyter.org/gist/ahmedas91/f93dc91562c06549f5890924d50d7c61&#34; width=&#34;1000&#34; height=&#34;6800&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>Hunting Down Growth Stocks</title>
      <link>http://ahmedas91.github.io/blog/2016/02/15/hunting-down-growth-stocks/</link>
      <pubDate>Mon, 15 Feb 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/02/15/hunting-down-growth-stocks/</guid>
      <description>

&lt;p&gt;Growth companies are those with huge potential returns and are often found in the technology sector. Here is the official definition from &lt;a href=&#34;http://www.investopedia.com/terms/g/growthcompany.asp&#34;&gt;investing.com&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A growth company is any firm whose business generates significant positive cash flows or earnings, which increase at significantly faster rates than the overall economy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how can we spot those kind of companies? We can screan stocks based on annual earning growth, revenues growth, return on equity&amp;hellip;etc. We can also look for companies developing disruptive technologies. But could we just let the experts do it for us? for free? Well this is what I am exploring in this post.&lt;/p&gt;

&lt;p&gt;Each year, a bunch of news sites and organizations publish lists of the most innovative companies. In this post, I aggregated those lists from the sites and compared the holding period return for the listed companies from 2012 to 2015. Not all companies in the lists were included. Only those with that are listed on either NASDAQ, NYSE and AMEX, and Trading in the stock market during the whole holding period. You can download the aggregated list from the &lt;a href=&#34;https://github.com/ahmedas91/Hunting_growth_stocks&#34;&gt;repo&lt;/a&gt; on github. The data are collected from the below soursec. Note that for Forves list, I could not find the whole list for 2012, only the top ten.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forbes.com/sites/samanthasharf/2012/09/05/the-ten-most-innovative-companies-in-america/#3f28c5aa23d3&#34;&gt;Forbes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.businessinsider.com/presenting-the-39-companies-that-will-win-through-innovation-2012-4?op=1&#34;&gt;Barclays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://top100innovators.stateofinnovation.thomsonreuters.com/&#34;&gt;Thomson Reuters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.strategyand.pwc.com/global/home/what-we-think/innovation1000/top-innovators-spenders#/tab-2012&#34;&gt;PWC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.technologyreview.com/tr50/2012/?_ga=1.224498527.453581319.1458158445&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bcgperspectives.com/content/interactive/innovation_growth_most_innovative_companies_interactive_guide/&#34;&gt;BCG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fastcompany.com/section/most-innovative-companies-2012&#34;&gt;Fast Company&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;loading-the-data:41fdf1a60fa155412b6923f1b832c365&#34;&gt;loading the data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# first we import the required libraries
import pandas as pd
import pandas_datareader.data as web
import datetime
import matplotlib.pyplot as plt
%matplotlib inline  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load the aggregated list of companies
data = pd.read_csv(&amp;quot;TOP_COMP_2012.csv&amp;quot;)
start = datetime.datetime(2013, 1, 1)
end = datetime.datetime(2015, 12, 31)
tickers = list(data[&#39;ticker&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# importing the stock prices from yahoo finance
ls_key = &#39;Adj Close&#39;
f = web.DataReader(tickers, &#39;yahoo&#39;,start,end)
cleanData = f.ix[ls_key]
stock_data = pd.DataFrame(cleanData)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;results:41fdf1a60fa155412b6923f1b832c365&#34;&gt;Results&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calulating the holding period returns 
returns = (stock_data.iloc[-1]/stock_data.iloc[0] - 1)
returns = pd.DataFrame(returns)
returns = returns.sort_values(by = [0], ascending=False)
returns[&#39;ticker&#39;] = list(returns.index)
returns.columns = [&#39;HPR&#39;,&#39;ticker&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Average return
avg_return = returns[&#39;HPR&#39;].mean(axis=0)*100
# percentage of positive returns
percentage_positive = len(returns[returns[&#39;HPR&#39;]&amp;gt;0])/float(len(returns))*100 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, iplot
init_notebook_mode()
iplot({
&amp;quot;data&amp;quot;: [
    go.Bar(
        x=returns[&#39;ticker&#39;],
        y=returns[&#39;HPR&#39;]
    )
        ],
&#39;layout&#39;: go.Layout(yaxis=go.YAxis(title=&#39;Holding Period Return&#39;, tickformat=&#39;%&#39;), 
                    autosize=False,
                    width=850,
                    height=600)
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;800&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/0.embed&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;The above chart shows an astonishing results with an average return of 66%. Around 87% of the companies showed a positive holding period return. So can we conclude that we can just rely on the experts for hunting big growth companies? Let&amp;rsquo;s not get our hopes up yet. Let&amp;rsquo;s first check if we just invested in the S&amp;amp;P 500 and compare its cumulative returns with a portfolio of equal weights of the stocks above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pyhon&#34;&gt;# Importing the s&amp;amp;p price index
ff = web.DataReader(&amp;quot;^GSPC&amp;quot;, &#39;yahoo&#39;,start,end)
s_p = pd.DataFrame(ff[&#39;Adj Close&#39;])

# calculating the daily cumulative returns during the period
sp = pd.DataFrame([0])
portfolio = pd.DataFrame([0])
for i in range(1,len(stock_data)):
    sp_returns = (s_p.iloc[i]/s_p.iloc[0] - 1)[0]
    portfolio_returns = (stock_data.iloc[i]/stock_data.iloc[0] - 1).mean(axis=0)
    sp = sp.append([sp_returns])
    portfolio = portfolio.append([portfolio_returns])    
cum_returns = pd.concat([portfolio, sp], axis=1)
cum_returns.columns = [&#39;Portfolio&#39;,&#39;S&amp;amp;P&#39;]
cum_returns = cum_returns.set_index(stock_data.index)

iplot({
&#39;data&#39;:[
    go.Scatter(
            x = cum_returns.index,
            y = cum_returns[col],
            name = col) for col in cum_returns.columns],
&#39;layout&#39;: go.Layout(yaxis=go.YAxis(title=&#39;Holding Period Return&#39;, tickformat=&#39;%&#39;), 
            autosize=False,
            width=950,
            height=600)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;800&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/4.embed&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Well, we&amp;rsquo;re still beating the market by about 30%. So can we really just let the experts do it for us? Well maybe use their lists as preliminary screener only.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kaggle Digits Recognition</title>
      <link>http://ahmedas91.github.io/blog/2016/01/05/kaggle-digits-recognition/</link>
      <pubDate>Tue, 05 Jan 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/01/05/kaggle-digits-recognition/</guid>
      <description>

&lt;p&gt;On my test post, we&amp;rsquo;ll solve  Kaggle&amp;rsquo;s &lt;a href=&#34;https://www.kaggle.com/c/digit-recognizer&#34;&gt;Digit Recognizer&lt;/a&gt; competition using python&amp;rsquo;s machine learning library &lt;code&gt;sklearn&lt;/code&gt;. It a really simple problem and used as a starting point (along with the &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34;&gt;Titanic&lt;/a&gt; one) Kaggle competitions.&lt;/p&gt;

&lt;h2 id=&#34;exploring-the-data:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Exploring the data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

X =  np.genfromtxt(&#39;train.csv&#39;,dtype=&#39;int_&#39;, 
                   delimiter=&#39;,&#39;, skip_header=1)
x_test =  np.genfromtxt(&#39;test.csv&#39;,dtype=&#39;int_&#39;, 
                        delimiter=&#39;,&#39;, skip_header=1)
x_train = X[:,1:]
y_train = X[:,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each row in the &lt;code&gt;x_train&lt;/code&gt; and &lt;code&gt;x_test&lt;/code&gt; data is a 28x28 pixels image with a total of 784 pixels. Therefore, we will write a simple function takes randomly selected rows, reshapes them into 28x28 matrices and display them using &lt;code&gt;matplotlib.image.mpimg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
%matplotlib inline

def display(n):    
    for i in range(1,(n**2)+1):
        plt.subplot(n,n,i)
        plt.axis(&#39;off&#39;)
        pic = np.reshape(x_train[np.random.randint(1,42000)],(28,28))
        imgplot = plt.imshow(pic, cmap=&#39;Greys&#39;)
display(5)
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ahmedas91.github.io/images/digits.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;training-the-data:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Training the data&lt;/h2&gt;

&lt;h4 id=&#34;logistic-regression:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Logistic regression&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.linear_model import LogisticRegressionCV
model_log = LogisticRegressionCV(multi_class=&#39;multinomial&#39;) 
model_log.fit(x_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;random-forests:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Random forests&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.ensemble import RandomForestClassifier
model_rf = RandomForestClassifier(1000)
model_rf = ran.fit(x_train,y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;neural-networks:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Neural Networks&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import import tensorflow.contrib.learn as skflow
#Tensorflow library only accept numbers with type float
x_train = x_train.astype(&#39;float32&#39;)
y_train = y_train.astype(&#39;float32&#39;)
x_test = x_test.astype(&#39;float32&#39;)
model_nn = skflow.TensorFlowDNNClassifier(hidden_units=[100,50], n_classes=10, steps=100000)
model_nn.fit(x_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s check the accuracy of the training data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &#39;Logistic regression&#39;, model_log.score(x_train, y_train)
print &#39;Random forests&#39;, model_rf.score(x_train, y_train)
print &#39;Neural networks&#39;, model_nn.score(x_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;prints:
&lt;code&gt;Logistic regression 0.941357142857&lt;/code&gt;
&lt;code&gt;Random forests 1.0&lt;/code&gt;
&lt;code&gt;Neural networks 0.99328571428571433&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;submitting-the-data:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Submitting the data&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re gonna do the same thing with but with the x_test data and do some data cleaning for submission.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def submit(model,x_test, name):
    # predict y using the test set
    y_test = model.predict(x_test) 
    # kaggles requires the submission to include an index column         
    index = np.arange(1,len(x_test)+1, dtype=int)  
    # merging the y_test and index columns        
    y_test = np.column_stack((index,y_test))
    # convert to pandas dataframe
    y_test = pd.DataFrame(y_test)
    # headers required for the submission                          
    y_test.columns = [&#39;ImageId&#39;,&#39;Label&#39;]    
    # write the data to csv file in the directory    
    y_test = y_test.astype(&#39;int&#39;)
    y_test.to_csv(&amp;quot;&amp;quot;.join([name,&#39;.csv&#39;]), index=False) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;submit(model_log,x_test,&#39;model_log&#39;)
submit(model_rf,x_test,&#39;model_rf&#39;)
submit(model_nn,x_test,&#39;model_nn&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;results:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Results&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Model&lt;/th&gt;
&lt;th&gt;Test Accuracy Score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Logistic Regression&lt;/td&gt;
&lt;td&gt;0.91771&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Random Forests&lt;/td&gt;
&lt;td&gt;0.96800&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Neural Networks&lt;/td&gt;
&lt;td&gt;0.94900&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>
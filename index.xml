<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ahmad Mohammad</title>
    <link>http://ahmedas91.github.io/</link>
    <description>Recent content on Ahmad Mohammad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Apr 2016 20:55:56 +0300</lastBuildDate>
    <atom:link href="http://ahmedas91.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Classifying Students&#39; Success Rate</title>
      <link>http://ahmedas91.github.io/blog/2016/04/09/classifying-students-success-rate/</link>
      <pubDate>Sat, 09 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/04/09/classifying-students-success-rate/</guid>
      <description>&lt;iframe src=&#34;http://nbviewer.jupyter.org/gist/ahmedas91/0cc0b278292d1494bbe9e41d95560682&#34; width=&#34;1000&#34; height=&#34;9000&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://ahmedas91.github.io/about/</link>
      <pubDate>Tue, 05 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/about/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;http://ahmedas91.github.io/images/Ahmad_Resume_agility.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Boston Housing Prices</title>
      <link>http://ahmedas91.github.io/blog/2016/04/05/boston-housing-prices/</link>
      <pubDate>Tue, 05 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/04/05/boston-housing-prices/</guid>
      <description>&lt;iframe src=&#34;https://nbviewer.jupyter.org/gist/ahmedas91/f93dc91562c06549f5890924d50d7c61&#34; width=&#34;1000&#34; height=&#34;6800&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
    <item>
      <title>Hunting Down Growth Stocks</title>
      <link>http://ahmedas91.github.io/blog/2016/04/05/hunting-down-growth-stocks/</link>
      <pubDate>Tue, 05 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/04/05/hunting-down-growth-stocks/</guid>
      <description>

&lt;p&gt;Growth companies are those with huge potential returns and are often found in the technology sector. Here is the official definition from &lt;a href=&#34;http://www.investopedia.com/terms/g/growthcompany.asp&#34;&gt;investing.com&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A growth company is any firm whose business generates significant positive cash flows or earnings, which increase at significantly faster rates than the overall economy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how can we spot those kind of companies? We can screan stocks based on annual earning growth, revenues growth, return on equity&amp;hellip;etc. We can also look for companies developing disruptive technologies. But could we just let the experts do it for us? for free? Well this is what I am exploring in this post.&lt;/p&gt;

&lt;p&gt;Each year, a bunch of news sites and organizations publish lists of the most innovative companies. In this post, I aggregated those lists from the sites and compared the holding period return for the listed companies from 2012 to 2015. Not all companies in the lists were included. Only those with that are listed on either NASDAQ, NYSE and AMEX, and Trading in the stock market during the whole holding period. You can download the aggregated list from the repo on github. The data are collected from the below soursec. Note that for Forves list, I could not find the whole list for 2012, only the top ten.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.forbes.com/sites/samanthasharf/2012/09/05/the-ten-most-innovative-companies-in-america/#3f28c5aa23d3&#34;&gt;Forbes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.businessinsider.com/presenting-the-39-companies-that-will-win-through-innovation-2012-4?op=1&#34;&gt;Barclays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://top100innovators.stateofinnovation.thomsonreuters.com/&#34;&gt;Thomson Reuters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.strategyand.pwc.com/global/home/what-we-think/innovation1000/top-innovators-spenders#/tab-2012&#34;&gt;PWC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www2.technologyreview.com/tr50/2012/?_ga=1.224498527.453581319.1458158445&#34;&gt;MIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bcgperspectives.com/content/interactive/innovation_growth_most_innovative_companies_interactive_guide/&#34;&gt;BCG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fastcompany.com/section/most-innovative-companies-2012&#34;&gt;Fast Company&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;loading-the-data:41fdf1a60fa155412b6923f1b832c365&#34;&gt;loading the data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# first we import the required libraries
import pandas as pd
import pandas_datareader.data as web
import datetime
import matplotlib.pyplot as plt
%matplotlib inline  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Load the aggregated list of companies
data = pd.read_csv(&amp;quot;TOP_COMP_2012.csv&amp;quot;)
start = datetime.datetime(2013, 1, 1)
end = datetime.datetime(2015, 12, 31)
tickers = list(data[&#39;ticker&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# importing the stock prices from yahoo finance
ls_key = &#39;Adj Close&#39;
f = web.DataReader(tickers, &#39;yahoo&#39;,start,end)
cleanData = f.ix[ls_key]
stock_data = pd.DataFrame(cleanData)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;results:41fdf1a60fa155412b6923f1b832c365&#34;&gt;Results&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Calulating the holding period returns 
returns = (stock_data.iloc[-1]/stock_data.iloc[0] - 1)
returns = pd.DataFrame(returns)
returns = returns.sort_values(by = [0], ascending=False)
returns[&#39;ticker&#39;] = list(returns.index)
returns.columns = [&#39;HPR&#39;,&#39;ticker&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Average return
avg_return = returns[&#39;HPR&#39;].mean(axis=0)*100
# percentage of positive returns
percentage_positive = len(returns[returns[&#39;HPR&#39;]&amp;gt;0])/float(len(returns))*100 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, iplot
init_notebook_mode()
iplot({
&amp;quot;data&amp;quot;: [
    go.Bar(
        x=returns[&#39;ticker&#39;],
        y=returns[&#39;HPR&#39;]
    )
        ],
&#39;layout&#39;: go.Layout(yaxis=go.YAxis(title=&#39;Holding Period Return&#39;, tickformat=&#39;%&#39;), 
                    autosize=False,
                    width=850,
                    height=600)
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;800&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/0.embed&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;The above chart shows an astonishing results with an average return of 66%. Around 87% of the companies showed a positive holding period return. So can we conclude that we can just rely on the experts for hunting big growth companies? Let&amp;rsquo;s not get our hopes up yet. Let&amp;rsquo;s first check if we just invested in the S&amp;amp;P 500 and compare its cumulative returns with a portfolio of equal weights of the stocks above.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-pyhon&#34;&gt;# Importing the s&amp;amp;p price index
ff = web.DataReader(&amp;quot;^GSPC&amp;quot;, &#39;yahoo&#39;,start,end)
s_p = pd.DataFrame(ff[&#39;Adj Close&#39;])

# calculating the daily cumulative returns during the period
sp = pd.DataFrame([0])
portfolio = pd.DataFrame([0])
for i in range(1,len(stock_data)):
    sp_returns = (s_p.iloc[i]/s_p.iloc[0] - 1)[0]
    portfolio_returns = (stock_data.iloc[i]/stock_data.iloc[0] - 1).mean(axis=0)
    sp = sp.append([sp_returns])
    portfolio = portfolio.append([portfolio_returns])    
cum_returns = pd.concat([portfolio, sp], axis=1)
cum_returns.columns = [&#39;Portfolio&#39;,&#39;S&amp;amp;P&#39;]
cum_returns = cum_returns.set_index(stock_data.index)

iplot({
&#39;data&#39;:[
    go.Scatter(
            x = cum_returns.index,
            y = cum_returns[col],
            name = col) for col in cum_returns.columns],
&#39;layout&#39;: go.Layout(yaxis=go.YAxis(title=&#39;Holding Period Return&#39;, tickformat=&#39;%&#39;), 
            autosize=False,
            width=950,
            height=600)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;iframe width=&#34;900&#34; height=&#34;800&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; src=&#34;https://plot.ly/~ahmedas91/4.embed&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Well, we&amp;rsquo;re still beating the market by about 30%. So can we really just let the experts do it for us? Well maybe use their lists as preliminary screener only.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kaggle Digits Recognition</title>
      <link>http://ahmedas91.github.io/blog/2016/04/05/kaggle-digits-recognition/</link>
      <pubDate>Tue, 05 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/04/05/kaggle-digits-recognition/</guid>
      <description>

&lt;p&gt;On my test post, we&amp;rsquo;ll solve  Kaggle&amp;rsquo;s &lt;a href=&#34;https://www.kaggle.com/c/digit-recognizer&#34;&gt;Digit Recognizer&lt;/a&gt; competition using python&amp;rsquo;s machine learning library &lt;code&gt;sklearn&lt;/code&gt;. It a really simple problem and used as a starting point (along with the &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34;&gt;Titanic&lt;/a&gt; one) Kaggle competitions. If you want to check out an implementation from scratch, I have uploaded one on this repo on github.&lt;/p&gt;

&lt;h2 id=&#34;exploring-the-data:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Exploring the data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

X =  np.genfromtxt(&#39;train.csv&#39;,dtype=&#39;int_&#39;, 
                   delimiter=&#39;,&#39;, skip_header=1)
x_test =  np.genfromtxt(&#39;test.csv&#39;,dtype=&#39;int_&#39;, 
                        delimiter=&#39;,&#39;, skip_header=1)
x_train = X[:,1:]
y_train = X[:,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each row in the &lt;code&gt;x_train&lt;/code&gt; and &lt;code&gt;x_test&lt;/code&gt; data is a 28x28 pixels image with a total of 784 pixels. Therefore, we will write a simple function takes randomly selected rows, reshapes them into 28x28 matrices and display them using &lt;code&gt;matplotlib.image.mpimg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
%matplotlib inline

def display(n):    
    for i in range(1,(n**2)+1):
        plt.subplot(n,n,i)
        plt.axis(&#39;off&#39;)
        pic = np.reshape(x_train[np.random.randint(1,42000)],(28,28))
        imgplot = plt.imshow(pic, cmap=&#39;Greys&#39;)
display(5)
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://ahmedas91.github.io/images/digits.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;training-the-data:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Training the data&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to use a cross validated logistic linear regression function with an l2 regularization using sklearn&amp;rsquo;s &lt;code&gt;linear_model.LogisticRegressionCV&lt;/code&gt;. Since we have 10 classes 0 to 9, we&amp;rsquo;ll also need the &lt;code&gt;multiclass.OneVsRestClassifier&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegressionCV

classifier = OneVsRestClassifier(LogisticRegressionCV(penalty=&#39;l2&#39;, n_jobs = -1)) 
classifier.fit(x_train, y_train)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s check the accuracy of the training data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# predict y using the train set
y_predicted = classifier.predict(x_train)             
accuracy = np.mean((y_predicted == y_train) * 100)
print &amp;quot;Training set accuracy: {0:.4f}%&amp;quot;.format(accuracy)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;submitting-the-data:d0e6025616b3fd7d9f31e36bec92e790&#34;&gt;Submitting the data&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re gonna do the same thing with but with the x_test data and do some data cleaning for submission.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# predict y using the test set
y_test = classifier.predict(x_test) 
# kaggles requires the submission to include an index column         
index = np.arange(1,len(x_test)+1, dtype=int)  
# merging the y_test and index columns        
y_test = np.column_stack((index,y_test))
# convert to pandas dataframe
y_test = pd.DataFrame(y_test)
# headers required for the submission                          
y_test.columns = [&#39;ImageId&#39;,&#39;Label&#39;]    
# write the data to csv file in the directory               
y_test.to_csv(&#39;y_test_kaggle_digits.csv&#39;, index=False) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After submitting the csv file we get an accuracy of 0.91100 which is not that bad (unless you check the rank and realize we&amp;rsquo;re at the bottom!!).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kaggles Animal Shelter Competition</title>
      <link>http://ahmedas91.github.io/blog/2016/04/05/kaggles-animal-shelter-competition/</link>
      <pubDate>Tue, 05 Apr 2016 20:55:56 +0300</pubDate>
      
      <guid>http://ahmedas91.github.io/blog/2016/04/05/kaggles-animal-shelter-competition/</guid>
      <description>&lt;iframe src=&#34;http://nbviewer.jupyter.org/gist/ahmedas91/5699f914a158bf23402d8f7cd53b3571&#34; width=&#34;1000&#34; height=&#34;6800&#34;&gt;&lt;/iframe&gt; 
</description>
    </item>
    
  </channel>
</rss>